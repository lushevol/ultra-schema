/* eslint-disable */ /**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import type * as Types from '../../rtk-query/types.generated';

import { api } from 'src/rtk-query/baseGraphQLApi';
module.hot?.accept();
export type SettlementCashflowBlotterQueryQueryVariables = Types.Exact<{
  filter?: Types.InputMaybe<
    Array<Types.InputMaybe<Types.FilterArg>> | Types.InputMaybe<Types.FilterArg>
  >;
  page: Types.Scalars['Int']['input'];
  size: Types.Scalars['Int']['input'];
}>;

export type SettlementCashflowBlotterQueryQuery = {
  __typename?: 'Query';
  cashflowsNew: {
    __typename?: 'GraphCashFlowNew';
    results: Array<{
      __typename?: 'ResultNew';
      Cashflow?: {
        __typename?: 'CashflowInfoNew';
        Payment_Amount?: string;
        Payment_Date?: string;
        NSTP_Exception?: string;
        Pay_Receive_Indicator?: string;
      };
      Entity?: {
        __typename?: 'EntityInfo';
        Counterparty_SCI_FMCODE?: string;
        Counterparty_Client_Type?: string;
      };
    }>;
    pageInfo: {
      __typename?: 'ResultPageInfo';
      totalHits: number;
      pageNo: number;
      pageSize: number;
      lastPage: boolean;
    };
  };
};

export type SettlementCashflowBlotterCountQueryQueryVariables = Types.Exact<{
  filter?: Types.InputMaybe<
    Array<Types.InputMaybe<Types.FilterArg>> | Types.InputMaybe<Types.FilterArg>
  >;
  page: Types.Scalars['Int']['input'];
  size: Types.Scalars['Int']['input'];
}>;

export type SettlementCashflowBlotterCountQueryQuery = {
  __typename?: 'Query';
  cashflowsNew: {
    __typename?: 'GraphCashFlowNew';
    pageInfo: {
      __typename?: 'ResultPageInfo';
      totalHits: number;
      pageNo: number;
      pageSize: number;
      lastPage: boolean;
    };
  };
};

export type SettlementGroupBlotterQueryQueryVariables = Types.Exact<{
  filter?: Types.InputMaybe<Types.GroupMsgReq>;
  page: Types.Scalars['Int']['input'];
  size: Types.Scalars['Int']['input'];
}>;

export type SettlementGroupBlotterQueryQuery = {
  __typename?: 'Query';
  groupMessages: {
    __typename?: 'GroupMessages';
    results: Array<{ __typename?: 'GroupInfo'; Id?: string }>;
    pageInfo: {
      __typename?: 'ResultPageInfo';
      totalHits: number;
      pageNo: number;
      pageSize: number;
      lastPage: boolean;
    };
  };
};

export type SettlementGroupBlotterCountQueryQueryVariables = Types.Exact<{
  filter?: Types.InputMaybe<Types.GroupMsgReq>;
  page: Types.Scalars['Int']['input'];
  size: Types.Scalars['Int']['input'];
}>;

export type SettlementGroupBlotterCountQueryQuery = {
  __typename?: 'Query';
  groupMessages: {
    __typename?: 'GroupMessages';
    pageInfo: {
      __typename?: 'ResultPageInfo';
      totalHits: number;
      pageNo: number;
      pageSize: number;
      lastPage: boolean;
    };
  };
};

export type SettlementExceptionCodeStatisticsQueryQueryVariables = Types.Exact<{
  cashflowIds:
    | Array<Types.Scalars['String']['input']>
    | Types.Scalars['String']['input'];
}>;

export type SettlementExceptionCodeStatisticsQueryQuery = {
  __typename?: 'Query';
  exceptionCodeStatisticsByCashflowIds: Array<{
    __typename?: 'ExceptionCodeStatistics';
    exceptionCode: string;
    count: number;
  }>;
};

export type Rate2UsdQueryVariables = Types.Exact<{
  ccy: Types.Scalars['String']['input'];
}>;

export type Rate2UsdQuery = {
  __typename?: 'Query';
  rate2usd?: { __typename?: 'Rate2USDMapping'; rate: number };
};

export const SettlementCashflowBlotterQueryDocument = `
    query SettlementCashflowBlotterQuery($filter: [FilterArg], $page: Int!, $size: Int!) {
  cashflowsNew(filter: $filter, page: $page, size: $size) {
    results {
      Cashflow {
        Payment_Amount
        Payment_Date
        NSTP_Exception
        Pay_Receive_Indicator
      }
      Entity {
        Counterparty_SCI_FMCODE
        Counterparty_Client_Type
      }
    }
    pageInfo {
      totalHits
      pageNo
      pageSize
      lastPage
    }
  }
}
    `;
export const SettlementCashflowBlotterCountQueryDocument = `
    query SettlementCashflowBlotterCountQuery($filter: [FilterArg], $page: Int!, $size: Int!) {
  cashflowsNew(filter: $filter, page: $page, size: $size) {
    pageInfo {
      totalHits
      pageNo
      pageSize
      lastPage
    }
  }
}
    `;
export const SettlementGroupBlotterQueryDocument = `
    query SettlementGroupBlotterQuery($filter: GroupMsgReq, $page: Int!, $size: Int!) {
  groupMessages(filter: $filter, page: $page, size: $size) {
    results {
      Id
    }
    pageInfo {
      totalHits
      pageNo
      pageSize
      lastPage
    }
  }
}
    `;
export const SettlementGroupBlotterCountQueryDocument = `
    query SettlementGroupBlotterCountQuery($filter: GroupMsgReq, $page: Int!, $size: Int!) {
  groupMessages(filter: $filter, page: $page, size: $size) {
    pageInfo {
      totalHits
      pageNo
      pageSize
      lastPage
    }
  }
}
    `;
export const SettlementExceptionCodeStatisticsQueryDocument = `
    query SettlementExceptionCodeStatisticsQuery($cashflowIds: [String!]!) {
  exceptionCodeStatisticsByCashflowIds(cashflowIds: $cashflowIds) {
    exceptionCode
    count
  }
}
    `;
export const Rate2UsdDocument = `
    query Rate2USD($ccy: String!) {
  rate2usd(ccy: $ccy) {
    rate
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  overrideExisting: module.hot?.status() === 'apply',
  endpoints: (build) => ({
    SettlementCashflowBlotterQuery: build.query<
      SettlementCashflowBlotterQueryQuery,
      SettlementCashflowBlotterQueryQueryVariables
    >({
      query: (variables) => ({
        document: SettlementCashflowBlotterQueryDocument,
        variables,
      }),
    }),
    SettlementCashflowBlotterCountQuery: build.query<
      SettlementCashflowBlotterCountQueryQuery,
      SettlementCashflowBlotterCountQueryQueryVariables
    >({
      query: (variables) => ({
        document: SettlementCashflowBlotterCountQueryDocument,
        variables,
      }),
    }),
    SettlementGroupBlotterQuery: build.query<
      SettlementGroupBlotterQueryQuery,
      SettlementGroupBlotterQueryQueryVariables
    >({
      query: (variables) => ({
        document: SettlementGroupBlotterQueryDocument,
        variables,
      }),
    }),
    SettlementGroupBlotterCountQuery: build.query<
      SettlementGroupBlotterCountQueryQuery,
      SettlementGroupBlotterCountQueryQueryVariables
    >({
      query: (variables) => ({
        document: SettlementGroupBlotterCountQueryDocument,
        variables,
      }),
    }),
    SettlementExceptionCodeStatisticsQuery: build.query<
      SettlementExceptionCodeStatisticsQueryQuery,
      SettlementExceptionCodeStatisticsQueryQueryVariables
    >({
      query: (variables) => ({
        document: SettlementExceptionCodeStatisticsQueryDocument,
        variables,
      }),
    }),
    Rate2USD: build.query<Rate2UsdQuery, Rate2UsdQueryVariables>({
      query: (variables) => ({ document: Rate2UsdDocument, variables }),
    }),
  }),
});

export { injectedRtkApi as api };
export const {
  useSettlementCashflowBlotterQueryQuery,
  useLazySettlementCashflowBlotterQueryQuery,
  useSettlementCashflowBlotterCountQueryQuery,
  useLazySettlementCashflowBlotterCountQueryQuery,
  useSettlementGroupBlotterQueryQuery,
  useLazySettlementGroupBlotterQueryQuery,
  useSettlementGroupBlotterCountQueryQuery,
  useLazySettlementGroupBlotterCountQueryQuery,
  useSettlementExceptionCodeStatisticsQueryQuery,
  useLazySettlementExceptionCodeStatisticsQueryQuery,
  useRate2UsdQuery,
  useLazyRate2UsdQuery,
} = injectedRtkApi;
