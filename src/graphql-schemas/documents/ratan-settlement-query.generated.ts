/* eslint-disable */ /**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import type * as Types from '../../rtk-query/types.generated';

import { api } from 'src/rtk-query/baseGraphQLApi';
module.hot?.accept();
export type SettlementCashflowsQueryQueryVariables = Types.Exact<{
  filter?: Types.InputMaybe<
    Array<Types.InputMaybe<Types.FilterArg>> | Types.InputMaybe<Types.FilterArg>
  >;
  page: Types.Scalars['Int']['input'];
  size: Types.Scalars['Int']['input'];
}>;

export type SettlementCashflowsQueryQuery = {
  __typename?: 'Query';
  cashflowsNew: {
    __typename?: 'GraphCashFlowNew';
    results: Array<{
      __typename?: 'SettlementSchemaRootType';
      Cashflow?: {
        __typename?: 'SettlementCashflowType';
        Cashflow_Id?: string;
        Cashflow_State?: Types.CashflowStateEnum;
        Cashflow_Version?: number;
        Payment_Amount?: number;
        Payment_Date?: string;
      };
    }>;
    pageInfo: {
      __typename?: 'ResultPageInfo';
      totalHits: number;
      pageNo: number;
      pageSize: number;
      lastPage: boolean;
    };
  };
};

export const SettlementCashflowsQueryDocument = `
    query SettlementCashflowsQuery($filter: [FilterArg], $page: Int!, $size: Int!) {
  cashflowsNew(filter: $filter, page: $page, size: $size) {
    results {
      Cashflow {
        Cashflow_Id
        Cashflow_State
        Cashflow_Version
        Payment_Amount
        Payment_Date
      }
    }
    pageInfo {
      totalHits
      pageNo
      pageSize
      lastPage
    }
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  overrideExisting: module.hot?.status() === 'apply',
  endpoints: (build) => ({
    SettlementCashflowsQuery: build.query<
      SettlementCashflowsQueryQuery,
      SettlementCashflowsQueryQueryVariables
    >({
      query: (variables) => ({
        document: SettlementCashflowsQueryDocument,
        variables,
      }),
    }),
  }),
});

export { injectedRtkApi as api };
export const {
  useSettlementCashflowsQueryQuery,
  useLazySettlementCashflowsQueryQuery,
} = injectedRtkApi;
