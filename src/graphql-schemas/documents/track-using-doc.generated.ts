/* eslint-disable */ /**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import type * as Types from '../../rtk-query/types.generated';

import { api } from 'src/rtk-query/baseGraphQLApi';
module.hot?.accept();
export type QueryTrackingRecordsQueryQueryVariables = Types.Exact<{
  keys:
    | Array<Types.Scalars['String']['input']>
    | Types.Scalars['String']['input'];
}>;

export type QueryTrackingRecordsQueryQuery = {
  __typename?: 'Query';
  queryTrackingRecords: Array<{
    __typename?: 'TrackingRecord';
    id: string;
    key: string;
    userId: string;
    timestamp: string;
  }>;
};

export type IAmUsingMutationMutationVariables = Types.Exact<{
  keys:
    | Array<Types.Scalars['String']['input']>
    | Types.Scalars['String']['input'];
}>;

export type IAmUsingMutationMutation = {
  __typename?: 'Mutation';
  iAmUsing: Array<{
    __typename?: 'TrackingRecord';
    id: string;
    key: string;
    userId: string;
    timestamp: string;
  }>;
};

export type OnTrackingRecordsUpdatedSubscriptionSubscriptionVariables =
  Types.Exact<{
    keys:
      | Array<Types.Scalars['String']['input']>
      | Types.Scalars['String']['input'];
  }>;

export type OnTrackingRecordsUpdatedSubscriptionSubscription = {
  __typename?: 'Subscription';
  onTrackingRecordsUpdated: Array<{
    __typename?: 'TrackingRecord';
    id: string;
    key: string;
    userId: string;
    timestamp: string;
  }>;
};

export type TrackingRecordFragmentFragment = {
  __typename?: 'TrackingRecord';
  id: string;
  key: string;
  userId: string;
  timestamp: string;
};

export const TrackingRecordFragmentFragmentDoc = `
    fragment TrackingRecordFragment on TrackingRecord {
  id
  key
  userId
  timestamp
}
    `;
export const QueryTrackingRecordsQueryDocument = `
    query QueryTrackingRecordsQuery($keys: [String!]!) {
  queryTrackingRecords(keys: $keys) {
    ...TrackingRecordFragment
  }
}
    ${TrackingRecordFragmentFragmentDoc}`;
export const IAmUsingMutationDocument = `
    mutation IAmUsingMutation($keys: [String!]!) {
  iAmUsing(keys: $keys) {
    ...TrackingRecordFragment
  }
}
    ${TrackingRecordFragmentFragmentDoc}`;
export const OnTrackingRecordsUpdatedSubscriptionDocument = `
    subscription OnTrackingRecordsUpdatedSubscription($keys: [String!]!) {
  onTrackingRecordsUpdated(keys: $keys) {
    ...TrackingRecordFragment
  }
}
    ${TrackingRecordFragmentFragmentDoc}`;

const injectedRtkApi = api.injectEndpoints({
  overrideExisting: module.hot?.status() === 'apply',
  endpoints: (build) => ({
    QueryTrackingRecordsQuery: build.query<
      QueryTrackingRecordsQueryQuery,
      QueryTrackingRecordsQueryQueryVariables
    >({
      query: (variables) => ({
        document: QueryTrackingRecordsQueryDocument,
        variables,
      }),
    }),
    IAmUsingMutation: build.mutation<
      IAmUsingMutationMutation,
      IAmUsingMutationMutationVariables
    >({
      query: (variables) => ({ document: IAmUsingMutationDocument, variables }),
    }),
  }),
});

export { injectedRtkApi as api };
export const {
  useQueryTrackingRecordsQueryQuery,
  useLazyQueryTrackingRecordsQueryQuery,
  useIAmUsingMutationMutation,
} = injectedRtkApi;
