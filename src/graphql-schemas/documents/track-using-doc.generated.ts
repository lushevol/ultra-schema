/* eslint-disable */ /**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import type * as Types from '../../rtk-query/types.generated';

import { api } from 'src/rtk-query/baseGraphQLApi';
module.hot?.accept();
export type TrackingRecordsQueryQueryVariables = Types.Exact<{
  keys:
    | Array<Types.Scalars['String']['input']>
    | Types.Scalars['String']['input'];
}>;

export type TrackingRecordsQueryQuery = {
  __typename?: 'Query';
  trackingRecords: Array<{
    __typename?: 'TrackingRecord';
    id: string;
    key: string;
    userId: string;
    timestamp: string;
  }>;
};

export type UpdateTrackingRecordsMutationMutationVariables = Types.Exact<{
  keys:
    | Array<Types.Scalars['String']['input']>
    | Types.Scalars['String']['input'];
}>;

export type UpdateTrackingRecordsMutationMutation = {
  __typename?: 'Mutation';
  updateTrackingRecords: Array<{
    __typename?: 'TrackingRecord';
    id: string;
    key: string;
    userId: string;
    timestamp: string;
  }>;
};

export type OnTrackingRecordsUpdatedSubscriptionSubscriptionVariables =
  Types.Exact<{
    keys:
      | Array<Types.Scalars['String']['input']>
      | Types.Scalars['String']['input'];
  }>;

export type OnTrackingRecordsUpdatedSubscriptionSubscription = {
  __typename?: 'Subscription';
  onTrackingRecordsUpdated: Array<{
    __typename?: 'TrackingRecordChangeNotification';
    status: Types.TrackingRecordChangeStatus;
    data: {
      __typename?: 'TrackingRecord';
      id: string;
      key: string;
      userId: string;
      timestamp: string;
    };
  }>;
};

export const TrackingRecordsQueryDocument = `
    query TrackingRecordsQuery($keys: [String!]!) {
  trackingRecords(keys: $keys) {
    id
    key
    userId
    timestamp
  }
}
    `;
export const UpdateTrackingRecordsMutationDocument = `
    mutation UpdateTrackingRecordsMutation($keys: [String!]!) {
  updateTrackingRecords(keys: $keys) {
    id
    key
    userId
    timestamp
  }
}
    `;
export const OnTrackingRecordsUpdatedSubscriptionDocument = `
    subscription OnTrackingRecordsUpdatedSubscription($keys: [String!]!) {
  onTrackingRecordsUpdated(keys: $keys) {
    status
    data {
      id
      key
      userId
      timestamp
    }
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  overrideExisting: module.hot?.status() === 'apply',
  endpoints: (build) => ({
    TrackingRecordsQuery: build.query<
      TrackingRecordsQueryQuery,
      TrackingRecordsQueryQueryVariables
    >({
      query: (variables) => ({
        document: TrackingRecordsQueryDocument,
        variables,
      }),
    }),
    UpdateTrackingRecordsMutation: build.mutation<
      UpdateTrackingRecordsMutationMutation,
      UpdateTrackingRecordsMutationMutationVariables
    >({
      query: (variables) => ({
        document: UpdateTrackingRecordsMutationDocument,
        variables,
      }),
    }),
  }),
});

export { injectedRtkApi as api };
export const {
  useTrackingRecordsQueryQuery,
  useLazyTrackingRecordsQueryQuery,
  useUpdateTrackingRecordsMutationMutation,
} = injectedRtkApi;
